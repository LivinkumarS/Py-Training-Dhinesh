What is Python?
High-level,
Interpreted,
General-purpose Programming Language.

Extension---> .py

To Create Comments---> single line comment  --> # comment, Multi line comment '''comments'''

Key Features
--------------
Easy to read and write.
Dynamically Typed language.(no need to declare variable types)
Supports multiple Programming Concepts (OOP, Functional Programming).

print(55)---> 55 will be prited out in output.
input("Question")---> to get input from the user.
varname=value

Variable
--------------
A variable is a name that refers to a value stored in a memory.
Rules
------
>> Must start with a letter or underscore (_)
>> But it can contain letters, numbers and underscore
>> case sensitive
>> avoid revserved keywords name.

Datatype
----------
Python is Dynamically Typed Language, so you don't need to declare the data type explicitly.

Datatype:
---------
Integer--> Int ---> whole numbers (...-3,-2,-1,0,1,2,3...)
float---> Decimal Numbers (3.14, 2.33434, 10.12, 12,5..)
string---> str ---> Sequence of char--> '',"" (concat---> +), formatting(f'').
boolean--> bool ---> True or False

Type Casting
-------------
type()--> used to find type of any value

str--> int ---> int('')
int--str ---> str(10)
str--> float---> float('')
bool()---> converting into bool.


Operators
-----------
Arithmetic Operator 
----------------------
Used to perform mathematical operation.

Add---> +
Sub---> -
mul---> *
div---> /
Floor Division---> //
Modulus---> %
Exponentiation--> **

Comparison Operator 
---------------------
Used to compare values and it will return boolean values 

== ---> equal to
!= ---> not equal to 
> ---> greater than 
< ---> lesser than 
>=---> greater than or equal
<=---> lesser than or equal

Logical Operators
------------------
used to combine multiple conditions
and---> Both conditions must be True.
or---> any one condition must be True.
not--> revert the result.

Assignment Operator 
--------------------
= ---> Assign 
+= --> Add and Assign 
-= ---> sub assign 
*=
/=
//=
%=
**=

Bitwise Operator 
-----------------
AND---> &---> operates with bit values.
OR---> |---> operates with bit values.
X-OR---> ^ ---> operates with bit values.(same--> 0, diff--> 1)
NOT---> ~ ---> ~a = -(a+1)
Right Shift---> >>
Left Shift ---> <<

Control Flow - if, else, elif
-------------------------------
control flow lets you execute the block of code according to the condition.
>> It runs one specific block,
>> Ignores others

If statement
-------------
if condition:
    # block of code

condition is True--> block of code will get executed.

Else Statement 
---------------
else should come along with if statement.

else:
    # block of code

it will be executed when if condition is False.

Else if (elif) block:
----------------
else if should come along with if statement.

elif condition:
    #block of code

Nested If Blocks
------------------
write an if inside another if.
if condition1:
    if condition2:
        #block of code

Ternary Operator 
--------------------
one line if-else expression.

a= val1 if condition else val2.

Loops
------
Loops help to repeat a block of code multiple times.

1) while Loop  (when number of iteration is not known)
----------------
syntax:
--------
while condition:
    #block of code

as long as the condition is True, the while loop will keep iterating the block of code.

2) for Loop    (when number of iteration is known)
----------------
used to iterate an iterable datatype.
syntax:
for var in iterableDatatype:
    #block of code.

Control Statements
-------------------
break----> stop the loop immediately
continue ---> it will skip the current iteration

task
-----
number input.
prime.
not prime.

Datastructures
----------------

common inbuilt method for all iterable datatype ---> len()

List
------
Ordered, mutable and allows duplicate element.
[val1,val2,va3].
defined using [].

Iterable datatype---> we can access each and every element in it using index number.

Inbuilt methods.
-----------------
list.append(ele)----> adding an element at the end
list.insert(ind,ele)----> adding an element at any specific place we want
list.remove(ele)--> remove an element from a list.(first occurance).
list.pop()---> remove the last 
list.sort()---> arranging in asc order.
list.reverse()---> reverse the list.

Tuple
------
Immutable, allows duplicates, Iterable
defined using ().

Sets 
----
no duplicates are allowed,mutable, not iterable.
defined using {}.

set.add(ele)
set.remove(val)

Type Casting amoung these three---> set(), list(), tuple()

Dictionary
----------
key-value pairs.
duplicates are allowed,
mutable
defined using {key:value}

del dict[key]----> deleting a key value pair.

dict.keys()---> return list of keys
dict.values()---> return list of values
dict.items()---> return list of tuples(key,value)